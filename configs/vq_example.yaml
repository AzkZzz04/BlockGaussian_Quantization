# VQ Example Configuration - Aligned with mc_aerial.yaml for consistency

# scene params
scene_dirpath: ./datasets/matrixcity/aerial/train/block_all
output_dirpath: ./output/mc_aerial_vq
white_background: false
sh_degree: 3
evaluate: True
scene_scale: 1.0
image_scale: 0.5
expand_ratio: 0.05
vertical_axis: "z"
max_tree_depth: 6
num_points_thresh: 300000
cover_ratio_thresh: 0.3

# training params
num_workers: 0
batch_size: 1
preload: "cpu" # "cpu" / "none"
iterations: 20000

position_lr_init: 0.00016
position_lr_final: 0.0000016
position_lr_delay_mult: 0.01
position_lr_max_steps: None
feature_lr: 0.0025
opacity_lr: 0.025
scaling_lr: 0.005
rotation_lr: 0.001
random_background: false

lambda_dssim: 0.2
depth_l1_weight_init: 1.0
depth_l1_weight_final: 0.1
reproj_l1_weight_init: 0.01
reproj_l1_weight_final: 0.5
depth_inv_loss: true
pesudo_loss: true
pesudo_loss_start: 5000

# densify and prune params
percent_dense: 0.01
densify_grad_threshold: 0.0002
densification_interval: 500
densify_from_iter: 1000
densify_until_iter: 20000
opacity_reset_interval: 20000
min_opacity: 0.005
densify_only_in_block: true

# rendering paramss
convert_SHs_python: false
compute_cov3D_python: false
debug: false
antialiasing: false

# VQ parameters - Unified RVQ approach with Layer-Aware Training
# 配置文件说明:
# - vq_fast.yaml:    快速模式 (rvq_layers=1, 等价K-Means)
# - vq_example.yaml: 平衡模式 (rvq_layers=2, 当前配置)
# - vq_quality.yaml: 高质量模式 (rvq_layers=3, 最佳压缩)
#
# 渐进式层大小分配说明:
# 使用权重 [1, 1/2, 1/3, 1/4, ...] 分配聚类数
# - layers=1: [1024] (等价K-Means)
# - layers=2: [683, 341] (权重 [2/3, 1/3])
# - layers=3: [554, 277, 185] (权重 [6/11, 3/11, 2/11])
# 第一层占主导地位，后续层处理残差细节
#
# 新特性：
# - 频带重加权：高频SH系数获得更高权重，改善LPIPS
# - 层间感知对齐：后层使用更高的感知损失权重，强制关注高频细节
#
# 推荐参数组合:
# - 高质量: rvq_layers=3, kmeans_ncls_sh=2048, kmeans_ncls_dc=8192
# - 平衡模式: rvq_layers=2, kmeans_ncls_sh=2048, kmeans_ncls_dc=1024 (当前配置)
# - 快速模式: rvq_layers=1, kmeans_ncls_sh=256, kmeans_ncls_dc=2048 (等价K-Means)

quant_params: ['sh', 'dc']    # 要量化的参数: 'sh'(球谐), 'dc'(漫反射)
rvq_layers: 2                 # RVQ层数: 1=K-Means等价, 2+=真正的残差VQ
vq_mode: 'online'             # online: 训练中使用量化; export: 仅导出时量化

# VQ时机和频率控制
kmeans_st_iter: 10000         # 开始VQ的迭代次数 (建议在训练中期开始)
kmeans_freq: 100              # 重新分配频率(仅online模式, 建议100-500)

# VQ质量参数
kmeans_ncls_sh: 2048          # SH特征的目标聚类数 (影响颜色精度)
kmeans_ncls_dc: 1024          # DC特征的目标聚类数 (影响基础颜色)
kmeans_iters: 10              # 每层K-Means迭代次数 (10通常足够)

# 新特性开关
sh_band_weighting: true       # 启用SH频带重加权 (改善高频保持，推荐启用)
band_weight_alpha: 0.15       # 频带权重强度 (0.1-0.2, 越大高频权重越高)
layer_aware_training: true    # 启用层间感知对齐 (后层更注重感知质量)

# kmeans_max_samples removed - now always uses full data for optimal K-Means++ initialization